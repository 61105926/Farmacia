<?php

namespace App\Http\Controllers;

use App\Models\Sale;
use App\Models\SaleItem;
use App\Models\Client;
use App\Models\Product;
use App\Models\User;
use App\Models\Presale;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Inertia\Response;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Log;

class SaleController extends Controller
{
    /**
     * Display a listing of sales
     */
    public function index(Request $request): Response
    {
        try {
            // Verificar si las tablas existen
            if (!\Schema::hasTable('sales')) {
                return Inertia::render('Sales/Index', [
                    'sales' => (object) ['data' => [], 'links' => null],
                    'filters' => $request->only(['search', 'status', 'salesperson_id', 'date_from', 'date_to']),
                    'salespeople' => [],
                    'error' => 'Las tablas de ventas no existen. Por favor, crea las tablas primero.'
                ]);
            }

            $sales = Sale::query()
                ->with(['client:id,business_name', 'salesperson:id,name'])
                ->when($request->search, function ($query, $search) {
                    $query->where(function ($q) use ($search) {
                        $q->where('code', 'like', "%{$search}%")
                          ->orWhereHas('client', function ($clientQuery) use ($search) {
                              $clientQuery->where('business_name', 'like', "%{$search}%");
                          });
                    });
                })
                ->when($request->status, function ($query, $status) {
                    $query->where('status', $status);
                })
                ->when($request->salesperson_id, function ($query, $salespersonId) {
                    $query->where('salesperson_id', $salespersonId);
                })
                ->when($request->date_from, function ($query, $date) {
                    $query->whereDate('created_at', '>=', $date);
                })
                ->when($request->date_to, function ($query, $date) {
                    $query->whereDate('created_at', '<=', $date);
                })
                ->latest()
                ->paginate(15)
                ->withQueryString();

            // Obtener estadísticas
            $stats = $this->getSalesStats();

            return Inertia::render('Sales/Index', [
                'sales' => $sales,
                'filters' => $request->only(['search', 'status', 'salesperson_id', 'payment_method', 'date_from', 'date_to']),
                'salespeople' => User::whereHas('roles', fn($q) => $q->where('name', 'vendedor-ventas'))
                    ->select('id', 'name')
                    ->get(),
                'stats' => $stats,
            ]);

        } catch (\Exception $e) {
            return Inertia::render('Sales/Index', [
                'sales' => (object) ['data' => [], 'links' => null],
                'filters' => $request->only(['search', 'status', 'salesperson_id', 'date_from', 'date_to']),
                'salespeople' => [],
                'error' => 'Error al cargar las ventas: ' . $e->getMessage()
            ]);
        }
    }

    /**
     * Show the form for creating a new sale
     */
    public function create(): Response
    {
        try {
            // Verificar si las tablas existen
            if (!\Schema::hasTable('sales')) {
                return Inertia::render('Sales/Create', [
                    'clients' => [],
                    'products' => [],
                    'salespeople' => [],
                    'presales' => [],
                    'error' => 'Las tablas de ventas no existen. Por favor, crea las tablas primero.'
                ]);
            }

            // Cargar datos de forma simple y segura
            $clients = [];
            $products = [];
            $salespeople = [];
            $presales = [];

            try {
                if (\Schema::hasTable('clients')) {
                    $clients = \DB::table('clients')
                        ->where('status', 'active')
                        ->select('id', 'business_name', 'trade_name', 'credit_limit')
                        ->get()
                        ->toArray();
                }
            } catch (\Exception $e) {
                // Si falla, usar array vacío
            }

            try {
                if (\Schema::hasTable('products')) {
                    $products = \DB::table('products')
                        ->where('is_active', true)
                        ->select('id', 'name', 'code', 'sale_price', 'stock_quantity')
                        ->get()
                        ->toArray();
                }
            } catch (\Exception $e) {
                // Si falla, usar array vacío
            }

            try {
                if (\Schema::hasTable('users')) {
                    // Cargar todos los usuarios como vendedores (sin filtro de is_active)
                    $salespeople = \DB::table('users')
                        ->select('id', 'name')
                        ->get()
                        ->toArray();
                }
            } catch (\Exception $e) {
                // Si falla, usar array vacío
            }

            try {
                if (\Schema::hasTable('presales')) {
                    $presales = \DB::table('presales')
                        ->where('status', 'confirmed')
                        ->select('id', 'code', 'client_id', 'total')
                        ->get()
                        ->toArray();
                }
            } catch (\Exception $e) {
                // Si falla, usar array vacío
            }

            return Inertia::render('Sales/Create', [
                'clients' => $clients,
                'products' => $products,
                'salespeople' => $salespeople,
                'presales' => $presales,
            ]);

        } catch (\Exception $e) {
            return Inertia::render('Sales/Create', [
                'clients' => [],
                'products' => [],
                'salespeople' => [],
                'presales' => [],
                'error' => 'Error al cargar datos: ' . $e->getMessage()
            ]);
        }
    }

    /**
     * Store a newly created sale
     */
    public function store(Request $request): RedirectResponse
    {
        // Verificar autenticación
        if (!auth()->check()) {
            \Log::error('SaleController store - Usuario no autenticado');
            return redirect()->route('login')->with('error', 'Debe iniciar sesión para crear ventas.');
        }
        
        \Log::info('SaleController store - Datos recibidos:', $request->all());
        \Log::info('SaleController store - Usuario autenticado:', [
            'user_id' => auth()->id(),
            'user_name' => auth()->user()?->name ?? 'No autenticado'
        ]);
        
        try {
            $validated = $request->validate([
                'client_id' => 'required|exists:clients,id',
                'salesperson_id' => 'nullable|exists:users,id',
                'presale_id' => 'nullable|exists:presales,id',
                'items' => 'required|array|min:1',
                'items.*.product_id' => 'required|exists:products,id',
                'items.*.quantity' => 'required|numeric|min:0.01',
                'items.*.unit_price' => 'required|numeric|min:0',
                'items.*.discount' => 'nullable|numeric|min:0|max:100',
                'payment_method' => 'required|in:cash,credit,transfer',
                'payment_status' => 'required|in:paid,pending,partial',
                'notes' => 'nullable|string|max:1000',
                'delivery_date' => 'nullable|date',
            ]);

            \Log::info('SaleController store - Datos validados:', $validated);

            // Verificar que las tablas existan
            if (!\Schema::hasTable('sales')) {
                return back()->with('error', 'Las tablas de ventas no existen. Por favor, crea las tablas primero.');
            }

            // Generar código automático
            $lastSale = \DB::table('sales')->orderBy('id', 'desc')->first();
            $nextNumber = $lastSale ? intval(substr($lastSale->code, 3)) + 1 : 1;
            $code = 'VEN' . str_pad($nextNumber, 6, '0', STR_PAD_LEFT);

            // Calcular totales
            $subtotal = 0;
            $totalDiscount = 0;
            $total = 0;

            foreach ($validated['items'] as $item) {
                $itemTotal = $item['quantity'] * $item['unit_price'];
                $itemDiscount = $itemTotal * ($item['discount'] ?? 0) / 100;
                $itemSubtotal = $itemTotal - $itemDiscount;
                
                $subtotal += $itemTotal;
                $totalDiscount += $itemDiscount;
                $total += $itemSubtotal;
            }

            // Crear venta usando consulta directa
            \Log::info('SaleController store - Intentando crear venta con datos:', [
                'code' => $code,
                'client_id' => $validated['client_id'],
                'salesperson_id' => $validated['salesperson_id'],
                'presale_id' => $validated['presale_id'],
                'subtotal' => $subtotal,
                'total_discount' => $totalDiscount,
                'total' => $total,
                'payment_method' => $validated['payment_method'],
                'payment_status' => $validated['payment_status'],
                'notes' => $validated['notes'],
                'delivery_date' => $validated['delivery_date'],
                'status' => 'pending',
                'created_by' => auth()->id(),
            ]);
            
            $saleId = \DB::table('sales')->insertGetId([
                'code' => $code,
                'client_id' => $validated['client_id'],
                'salesperson_id' => $validated['salesperson_id'],
                'presale_id' => $validated['presale_id'],
                'subtotal' => $subtotal,
                'total_discount' => $totalDiscount,
                'total' => $total,
                'payment_method' => $validated['payment_method'],
                'payment_status' => $validated['payment_status'],
                'notes' => $validated['notes'],
                'delivery_date' => $validated['delivery_date'],
                'status' => 'pending',
                'created_by' => auth()->id(),
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            // Crear items de la venta usando consulta directa
            foreach ($validated['items'] as $item) {
                $itemTotal = $item['quantity'] * $item['unit_price'];
                $itemDiscount = $itemTotal * ($item['discount'] ?? 0) / 100;
                
                \DB::table('sale_items')->insert([
                    'sale_id' => $saleId,
                    'product_id' => $item['product_id'],
                    'quantity' => $item['quantity'],
                    'unit_price' => $item['unit_price'],
                    'discount' => $item['discount'] ?? 0,
                    'subtotal' => $itemTotal,
                    'discount_amount' => $itemDiscount,
                    'total' => $itemTotal - $itemDiscount,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            }

            // Si viene de una preventa, marcarla como convertida
            if ($validated['presale_id']) {
                \DB::table('presales')
                    ->where('id', $validated['presale_id'])
                    ->update([
                        'status' => 'converted',
                        'converted_at' => now(),
                        'converted_by' => auth()->id(),
                        'updated_at' => now(),
                    ]);
            }

            \Log::info('SaleController store - Venta creada exitosamente con ID:', ['sale_id' => $saleId]);
            
            return redirect()->route('sales.index')
                ->with('success', 'Venta creada exitosamente con código: ' . $code);

        } catch (\Illuminate\Validation\ValidationException $e) {
            \Log::error('SaleController store - Error de validación:', [
                'errors' => $e->errors(),
                'data' => $request->all()
            ]);
            
            return back()->withErrors($e->errors())->withInput();
        } catch (\Exception $e) {
            \Log::error('SaleController store - Error:', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->with('error', 'Error al crear la venta: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified sale
     */
    public function show(Sale $sale): Response
    {
        $sale->load([
            'client',
            'salesperson',
            'presale',
            'items.product',
            'creator:id,name',
        ]);

        return Inertia::render('Sales/Show', [
            'sale' => $sale,
        ]);
    }

    /**
     * Show the form for editing the specified sale
     */
    public function edit(Sale $sale): Response
    {
        if ($sale->status !== 'draft') {
            return redirect()->route('sales.show', $sale)
                ->with('error', 'Solo se pueden editar ventas en estado borrador.');
        }

        $sale->load(['items.product']);

        return Inertia::render('Sales/Edit', [
            'sale' => $sale,
            'clients' => Client::where('status', 'active')
                ->select('id', 'business_name', 'trade_name')
                ->get(),
            'products' => Product::where('is_active', true)
                ->select('id', 'name', 'code', 'sale_price', 'stock_quantity')
                ->get(),
            'salespeople' => User::whereHas('roles', fn($q) => $q->where('name', 'vendedor-ventas'))
                ->select('id', 'name')
                ->get(),
        ]);
    }

    /**
     * Update the specified sale
     */
    public function update(Request $request, Sale $sale): RedirectResponse
    {
        if ($sale->status !== 'draft') {
            return back()->with('error', 'Solo se pueden editar ventas en estado borrador.');
        }

        $validated = $request->validate([
            'client_id' => 'required|exists:clients,id',
            'salesperson_id' => 'nullable|exists:users,id',
            'items' => 'required|array|min:1',
            'items.*.product_id' => 'required|exists:products,id',
            'items.*.quantity' => 'required|numeric|min:0.01',
            'items.*.unit_price' => 'required|numeric|min:0',
            'items.*.discount' => 'nullable|numeric|min:0|max:100',
            'payment_method' => 'required|in:cash,credit,transfer',
            'payment_status' => 'required|in:paid,pending,partial',
            'notes' => 'nullable|string|max:1000',
            'delivery_date' => 'nullable|date|after_or_equal:today',
        ]);

        DB::beginTransaction();
        try {
            // Calcular totales
            $subtotal = 0;
            $totalDiscount = 0;
            $total = 0;

            foreach ($validated['items'] as $item) {
                $itemTotal = $item['quantity'] * $item['unit_price'];
                $itemDiscount = $itemTotal * ($item['discount'] ?? 0) / 100;
                $itemSubtotal = $itemTotal - $itemDiscount;
                
                $subtotal += $itemTotal;
                $totalDiscount += $itemDiscount;
                $total += $itemSubtotal;
            }

            // Actualizar venta
            $sale->update([
                'client_id' => $validated['client_id'],
                'salesperson_id' => $validated['salesperson_id'],
                'subtotal' => $subtotal,
                'total_discount' => $totalDiscount,
                'total' => $total,
                'payment_method' => $validated['payment_method'],
                'payment_status' => $validated['payment_status'],
                'notes' => $validated['notes'],
                'delivery_date' => $validated['delivery_date'],
            ]);

            // Eliminar items existentes
            $sale->items()->delete();

            // Crear nuevos items
            foreach ($validated['items'] as $item) {
                $itemTotal = $item['quantity'] * $item['unit_price'];
                $itemDiscount = $itemTotal * ($item['discount'] ?? 0) / 100;
                
                SaleItem::create([
                    'sale_id' => $sale->id,
                    'product_id' => $item['product_id'],
                    'quantity' => $item['quantity'],
                    'unit_price' => $item['unit_price'],
                    'discount' => $item['discount'] ?? 0,
                    'subtotal' => $itemTotal,
                    'discount_amount' => $itemDiscount,
                    'total' => $itemTotal - $itemDiscount,
                ]);
            }

            DB::commit();

            return redirect()->route('sales.show', $sale)
                ->with('success', 'Venta actualizada exitosamente.');

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Error al actualizar la venta: ' . $e->getMessage());
        }
    }

    /**
     * Remove the specified sale
     */
    public function destroy(Sale $sale): RedirectResponse
    {
        if ($sale->status !== 'draft') {
            return back()->with('error', 'Solo se pueden eliminar ventas en estado borrador.');
        }

        $sale->delete();

        return redirect()->route('sales.index')
            ->with('success', 'Venta eliminada exitosamente.');
    }

    /**
     * Generate invoice for sale
     */
    public function generateInvoice(Sale $sale): RedirectResponse
    {
        if ($sale->status !== 'completed') {
            return back()->with('error', 'Solo se pueden generar facturas para ventas completadas.');
        }

        // TODO: Implementar generación de factura
        return back()->with('success', 'Factura generada exitosamente.');
    }

    /**
     * Print sale receipt
     */
    public function printReceipt(Sale $sale): Response
    {
        $sale->load([
            'client',
            'salesperson',
            'items.product',
        ]);

        return Inertia::render('Sales/PrintReceipt', [
            'sale' => $sale,
        ]);
    }

    /**
     * Complete sale (change status to completed)
     */
    public function complete(Sale $sale): RedirectResponse
    {
        if ($sale->status !== 'pending') {
            return back()->with('error', 'Solo se pueden completar ventas pendientes.');
        }

        $sale->update([
            'status' => 'completed',
            'completed_at' => now(),
            'completed_by' => auth()->id(),
        ]);

        \Log::info('SaleController complete - Venta completada:', ['sale_id' => $sale->id]);

        return back()->with('success', 'Venta completada exitosamente.');
    }

    /**
     * Cancel sale (change status to cancelled)
     */
    public function cancel(Sale $sale): RedirectResponse
    {
        if ($sale->status === 'cancelled') {
            return back()->with('error', 'La venta ya está cancelada.');
        }

        $sale->update([
            'status' => 'cancelled',
            'cancelled_at' => now(),
            'cancelled_by' => auth()->id(),
        ]);

        \Log::info('SaleController cancel - Venta cancelada:', ['sale_id' => $sale->id]);

        return back()->with('success', 'Venta cancelada exitosamente.');
    }

    /**
     * Print sale
     */
    public function print(Sale $sale): Response
    {
        $sale->load([
            'client:id,business_name,trade_name,email,phone',
            'salesperson:id,name',
            'items.product:id,name,code,description'
        ]);

        return Inertia::render('Sales/Print', [
            'sale' => $sale
        ]);
    }

    /**
     * Get sales statistics
     */
    private function getSalesStats(): array
    {
        try {
            if (!\Schema::hasTable('sales')) {
                return [
                    'total_sales' => 0,
                    'pending_sales' => 0,
                    'completed_sales' => 0,
                    'cancelled_sales' => 0,
                    'total_value' => 0,
                    'pending_value' => 0,
                    'completed_value' => 0,
                ];
            }

            $totalSales = \DB::table('sales')->count();
            $pendingSales = \DB::table('sales')->where('status', 'pending')->count();
            $completedSales = \DB::table('sales')->where('status', 'completed')->count();
            $cancelledSales = \DB::table('sales')->where('status', 'cancelled')->count();
            
            $totalValue = \DB::table('sales')->sum('total') ?? 0;
            $pendingValue = \DB::table('sales')->where('status', 'pending')->sum('total') ?? 0;
            $completedValue = \DB::table('sales')->where('status', 'completed')->sum('total') ?? 0;

            return [
                'total_sales' => $totalSales,
                'pending_sales' => $pendingSales,
                'completed_sales' => $completedSales,
                'cancelled_sales' => $cancelledSales,
                'total_value' => $totalValue,
                'pending_value' => $pendingValue,
                'completed_value' => $completedValue,
            ];
        } catch (\Exception $e) {
            \Log::error('SaleController getSalesStats - Error:', ['message' => $e->getMessage()]);
            return [
                'total_sales' => 0,
                'pending_sales' => 0,
                'completed_sales' => 0,
                'cancelled_sales' => 0,
                'total_value' => 0,
                'pending_value' => 0,
                'completed_value' => 0,
            ];
        }
    }
}